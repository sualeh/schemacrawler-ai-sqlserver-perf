name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: schemacrawler-ai/sqlserver-perf

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - id: checkout
      name: Checkout code
      uses: actions/checkout@v4

    - id: setup-python
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - id: install-poetry
      name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - id: cached-poetry-dependencies
      name: Load cached venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - id: install-dependencies
      name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - id: linting
      name: Run linting
      run: |
        poetry run black --check .
        poetry run ruff check .
      if: false

    - id: type-checking
      name: Run type checking
      run: poetry run mypy schemacrawler_ai_sqlserver_perf/ --ignore-missing-imports

    - id: run-tests
      name: Run tests
      run: poetry run pytest --cov=schemacrawler_ai_sqlserver_perf --cov-report=xml --cov-report=term-missing

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - id: checkout
      name: Checkout code
      uses: actions/checkout@v4

    - id: setup-buildx
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - id: login-dockerhub
      name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - id: meta
      name: Extract metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - id: build-push
      name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - id: checkout
      name: Checkout code
      uses: actions/checkout@v4

    - id: test-docker-image
      name: Test Docker image
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

        # Run the container in detached mode
        docker run -d --name test-container -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}

        # Wait for container to start
        sleep 10

        # Test if the container is running
        docker ps | grep test-container

        # Basic health check (adjust URL based on your server endpoints)
        # curl -f http://localhost:8000/health || echo "Health check endpoint not available yet"

        # Stop and remove container
        docker stop test-container
        docker rm test-container
